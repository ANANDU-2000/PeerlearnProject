Master Prompt for Replit Core AI Agent: Advanced Mentor Dashboard for PeerLearn (v3)

Objective:
Extend the PeerLearn mentor dashboard at /mentor/dashboard to include full learner‑booking workflows, enrollment details, real Razorpay payout integration, deeper earnings analytics, session detail drill‑downs, “Next” button flows, bi‑directional “Ready”/“Decline” signaling for RTC, and contextual alerts. Maintain Django 4.x, SQLite3, Tailwind CSS, vanilla JS, Django Channels, JWT auth, and mobile responsiveness.

────────────────────────────────────────────────────────────────────
1. Booking & Enrollment Workflow  
────────────────────────────────────────────────────────────────────  
 • Booking List (in “My Sessions → Scheduled”):  
   – Each session card shows “Booked: X/Y” where X = current bookings, Y = max participants.  
   – “View Learners” button: on click, open a slide‑over panel (slide in from right, 300 ms) listing each learner’s name, email, booking time, payment status.  
   – In the slide‑over, each learner row has:  
     * “Details” expand arrow: toggles (height‑auto expand, 200 ms) to show learner profile pic, bio, past sessions.  
     * “Mark Attended” checkbox: on click, POST /api/bookings/{booking_id}/attend/, row flashes green, updates attended count.  

 • Enrollment Confirmation:  
   – When mentor clicks “I’m Ready,” all booked learners receive a WebSocket push on channel session_{id}: “Mentor is ready—please confirm.”  
   – Learner cards in their dashboard show “Confirm Attendance” button. On learner confirm, POST /api/bookings/{id}/confirm/, card pulses blue.  
   – Mentor’s participant count badge pulses each time a learner confirms.  

────────────────────────────────────────────────────────────────────  
2. Razorpay Payout Integration  
────────────────────────────────────────────────────────────────────  
 • Earnings Tab Enhancements:  
   – Show “Available Balance” (completed sessions earnings – withdrawn) with count‑up animation.  
   – “Withdraw via Razorpay” button: on click, open modal with amount input (max = available), UPI ID field, “Request” button.  
     * Validate inputs client‑side (amount ≤ available, UPI format).  
     * On submit, POST /api/payouts/razorpay/ with payload; button shows spinner, then success toast “Withdrawal Requested.”  
   – Payout History table: columns Date, Amount, Method, Status. New rows slide down on success.  

 • Backend:  
   – Use Razorpay’s Python SDK to create a payout (server‑side), store payout_id, status.  
   – Poll Razorpay webhook to update payout status in Notification and Payout models.  

────────────────────────────────────────────────────────────────────  
3. Deep Earnings Analytics  
────────────────────────────────────────────────────────────────────  
 • Monthly & Weekly Breakdown:  
   – Tabbed sub‑views: “Weekly” / “Monthly.” Tab switch animates underline slide (200 ms).  
   – Bar chart of earnings, bars animate up; tooltips show exact amounts.  

 • Session‑Level Earnings Drill‑Down:  
   – In “Earnings → Sessions,” list each completed session with date, title, gross, commission (10%), net.  
   – “Details” expand: chart of per‑learner payments, ratings, comments.  

────────────────────────────────────────────────────────────────────  
4. Enhanced Session Detail View  
────────────────────────────────────────────────────────────────────  
 • “My Sessions → Past,” each card has “View Report” button: on click, full‑screen modal opens (fade 250 ms) showing:  
   – Attendance summary (booked vs. attended vs. no‑shows).  
   – Average rating and comments list.  
   – Chat transcript download link.  
   – “Re‑Schedule” button: pre‑fills “Create Session” modal with old data (slide‑over, 300 ms).  

────────────────────────────────────────────────────────────────────  
5. “Next” Button Flows & State Machine  
────────────────────────────────────────────────────────────────────  
 • In every multi‑step form/modal (e.g., time‑picker for Accept Request, payout modal), include “Back” and “Next” buttons:  
   – Next click validates current step via JS; errors shake the input (translateX ±5 px, 3 times).  
   – Successful validation transitions to next pane (slide left, 200 ms).  

────────────────────────────────────────────────────────────────────  
6. Bi‑Directional Ready/Decline & RTC Signaling  
────────────────────────────────────────────────────────────────────  
 • Real‑Time Status Buttons:  
   – Mentor “I’m Ready” flips to “Cancel Ready” with flipY animation. On click, POST /api/sessions/{id}/cancel_ready/, notifies learners.  
   – Learner “Confirm Attendance” toggles to “Decline” with red pulse. Decline sends POST /api/bookings/{id}/decline/, socket informs mentor.  

 • RTC Control Buttons:  
   – In /room/{id}: Mentor and learners each see both “Ready to Join” and “Decline/Leave” buttons before WebRTC starts.  
     * On “Ready to Join,” send signaling message { type: “ready” } over WS room_{id}; once both sides ready, show “Start Call.”  
     * On “Decline/Leave,” send { type: “decline” }; screen shows “Session Cancelled” overlay with fade‑in, then redirect back after 3s.  

────────────────────────────────────────────────────────────────────  
7. System‑Wide Alerts & Toasts  
────────────────────────────────────────────────────────────────────  
 • Global alert component (top‑right toast container):  
   – All actions (book, confirm, ready, decline, payout) trigger a toast: slide from right, auto‑dismiss after 4s, hover pauses timer.  
   – Error toasts shake horizontally on entry.  

 • WebSocket‑Driven Badges:  
   – Tabs “Requests,” “Notifications,” “Earnings” display numeric badges updated in real time. Badges pulse once per update.  

────────────────────────────────────────────────────────────────────  
8. Final Integration & Delivery  
────────────────────────────────────────────────────────────────────  
 • Models & APIs: Ensure Booking.confirmed, Booking.attended, Payout (with razorpay_id, upi), extended serializers.  
 • WebSocket Consumers:  
   – session_{id} for booking/enrollment messages.  
   – notifications_{user_id} for alerts.  
   – room_{session_id} for RTC signaling (offer, answer, ice, ready, decline).  

 • Replit Config:  
   – settings.py JWT and Channels config, Razorpay keys in secrets.  
   – Deploy with Daphne: daphne -b 0.0.0.0 -p 8000 peerlearn.asgi:application.  
   – requirements.txt includes razorpay, channels-redis, rest framework, simplejwt.

This prompt fully codifies the booked‑learner lifecycle, enrollment confirmations, real Razorpay withdrawals, granular earnings analytics, session drill‑downs, multi‑step “Next” flows, dual “Ready/Decline” signaling for RTC, and system‑wide animated alerts—ensuring a production‑ready mentor dashboard with no further coding guidance needed.