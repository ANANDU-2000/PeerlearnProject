# PeerLearn Platform - Complete System Architecture Documentation
# Advanced Peer-to-Peer Learning Platform with Real-time Video Communication

===============================================================================
                            SYSTEM OVERVIEW
===============================================================================

PeerLearn is a sophisticated peer-to-peer learning platform built with Django 
backend and real-time WebRTC video communication capabilities. The platform 
connects mentors and learners through intelligent matching algorithms and 
provides seamless video session experiences.

===============================================================================
                        TECHNICAL ARCHITECTURE
===============================================================================

=== BACKEND ARCHITECTURE ===

1. Framework: Django 5.2.1 (Python Web Framework)
2. Database: SQLite (Development) / PostgreSQL (Production)
3. Real-time: Django Channels + WebSockets
4. API: Django REST Framework
5. Authentication: Django Built-in + JWT Tokens
6. File Storage: Local (Development) / AWS S3 (Production)

=== FRONTEND ARCHITECTURE ===

1. Templates: Django Templates with Jinja2
2. Styling: Tailwind CSS (Utility-first CSS)
3. JavaScript: Alpine.js (Lightweight JS Framework)
4. Icons: Font Awesome 6.4.0
5. Animations: Custom CSS3 Animations

=== REAL-TIME COMMUNICATION ===

1. WebSocket Protocol: WSS/WS for signaling
2. WebRTC: Peer-to-peer video/audio communication
3. STUN/TURN Servers: For NAT traversal
4. Channel Layers: Redis backend for message routing

===============================================================================
                          WEBSOCKET WORKFLOW
===============================================================================

=== WebSocket Connection Flow ===

1. User Authentication:
   - User logs in via Django authentication
   - JWT token generated for WebSocket auth
   - Token passed to WebSocket connection

2. WebSocket Handshake:
   - Client connects to /ws/session/{session_id}/
   - Server validates user permissions
   - Connection added to session room group

3. Signaling Process:
   - Offer/Answer SDP exchange through WebSocket
   - ICE candidates shared for connectivity
   - Media stream negotiation completed

=== WebRTC Signaling Flow ===

1. Session Join:
   Client → WebSocket → "join_session" message
   Server → Validates user → Adds to room group
   Server → Broadcasts "user_joined" to room

2. Video Call Initiation:
   Caller → Creates RTCPeerConnection
   Caller → Generates offer SDP
   Caller → Sends offer via WebSocket
   Callee → Receives offer → Creates answer
   Callee → Sends answer back via WebSocket

3. ICE Candidate Exchange:
   Both peers → Generate ICE candidates
   Candidates → Sent via WebSocket signaling
   Direct P2P connection established

4. Media Stream:
   getUserMedia() → Access camera/microphone
   addTrack() → Add to RTCPeerConnection
   ontrack → Receive remote media stream
   Display in video elements

===============================================================================
                        API ENDPOINTS STRUCTURE
===============================================================================

=== Authentication APIs ===
POST /api/auth/login/          - User login
POST /api/auth/register/       - User registration
POST /api/auth/logout/         - User logout
GET  /api/auth/user/           - Get current user

=== Session Management APIs ===
GET    /api/sessions/                 - List all sessions
POST   /api/sessions/create/          - Create new session
GET    /api/sessions/{id}/            - Get session details
POST   /api/sessions/{id}/book/       - Book a session
POST   /api/sessions/{id}/start/      - Start session
POST   /api/sessions/{id}/end/        - End session
POST   /api/sessions/{id}/feedback/   - Submit feedback

=== User Management APIs ===
GET    /api/users/profile/        - Get user profile
PUT    /api/users/profile/update/ - Update profile
GET    /api/users/mentors/        - List mentors
POST   /api/users/follow/         - Follow mentor

=== Recommendation APIs ===
GET /api/recommendations/sessions/  - Get recommended sessions
GET /api/recommendations/mentors/   - Get recommended mentors
GET /api/recommendations/trending/  - Get trending content

===============================================================================
                        DATABASE SCHEMA DESIGN
===============================================================================

=== Core Tables Structure ===

1. USERS TABLE
+-----------+---------------+------------------+---------------------------+
| Sl No     | Field         | Data Type        | Constraints               |
+-----------+---------------+------------------+---------------------------+
| 1         | id            | BigAutoField     | Primary Key, Auto Inc     |
| 2         | username      | CharField(150)   | Unique, Not Null          |
| 3         | email         | EmailField       | Unique, Not Null          |
| 4         | first_name    | CharField(100)   | Optional                  |
| 5         | last_name     | CharField(100)   | Optional                  |
| 6         | role          | CharField(20)    | Choices: mentor/learner   |
| 7         | bio           | TextField        | Optional                  |
| 8         | skills        | JSONField        | Array of skills           |
| 9         | interests     | JSONField        | Array of interests        |
| 10        | profile_image | ImageField       | Upload path defined       |
| 11        | hourly_rate   | DecimalField     | For mentors               |
| 12        | is_active     | BooleanField     | Default True              |
| 13        | date_joined   | DateTimeField    | Auto Now Add              |
| 14        | last_login    | DateTimeField    | Auto Updated              |
+-----------+---------------+------------------+---------------------------+

2. SESSIONS TABLE
+-----------+------------------+------------------+---------------------------+
| Sl No     | Field            | Data Type        | Constraints               |
+-----------+------------------+------------------+---------------------------+
| 1         | id               | UUIDField        | Primary Key, UUID4        |
| 2         | title            | CharField(200)   | Not Null                  |
| 3         | description      | TextField        | Not Null                  |
| 4         | mentor           | ForeignKey       | User model, CASCADE       |
| 5         | schedule         | DateTimeField    | Not Null                  |
| 6         | duration         | IntegerField     | Minutes                   |
| 7         | max_participants | IntegerField     | Default 10                |
| 8         | current_participants | IntegerField | Default 0                 |
| 9         | status           | CharField(20)    | scheduled/active/completed|
| 10        | meeting_room_id  | CharField(100)   | Unique room identifier    |
| 11        | skills_required  | JSONField        | Array of required skills  |
| 12        | price            | DecimalField     | Session cost              |
| 13        | created_at       | DateTimeField    | Auto Now Add              |
| 14        | updated_at       | DateTimeField    | Auto Now                  |
+-----------+------------------+------------------+---------------------------+

3. BOOKINGS TABLE
+-----------+---------------+------------------+---------------------------+
| Sl No     | Field         | Data Type        | Constraints               |
+-----------+---------------+------------------+---------------------------+
| 1         | id            | BigAutoField     | Primary Key, Auto Inc     |
| 2         | learner       | ForeignKey       | User model, CASCADE       |
| 3         | session       | ForeignKey       | Session model, CASCADE    |
| 4         | status        | CharField(20)    | pending/confirmed/completed|
| 5         | payment_status| CharField(20)    | pending/paid/failed       |
| 6         | payment_id    | CharField(100)   | External payment ref      |
| 7         | booking_time  | DateTimeField    | Auto Now Add              |
| 8         | joined_at     | DateTimeField    | When user joined session  |
| 9         | left_at       | DateTimeField    | When user left session    |
| 10        | is_ready      | BooleanField     | Ready for session start   |
| 11        | created_at    | DateTimeField    | Auto Now Add              |
| 12        | updated_at    | DateTimeField    | Auto Now                  |
+-----------+---------------+------------------+---------------------------+

4. FEEDBACK TABLE
+-----------+---------------+------------------+---------------------------+
| Sl No     | Field         | Data Type        | Constraints               |
+-----------+---------------+------------------+---------------------------+
| 1         | id            | BigAutoField     | Primary Key, Auto Inc     |
| 2         | session       | ForeignKey       | Session model, CASCADE    |
| 3         | user          | ForeignKey       | User model, CASCADE       |
| 4         | rating        | IntegerField     | Range 1-5                 |
| 5         | comment       | TextField        | Optional feedback text    |
| 6         | created_at    | DateTimeField    | Auto Now Add              |
+-----------+---------------+------------------+---------------------------+

5. NOTIFICATIONS TABLE
+-----------+---------------+------------------+---------------------------+
| Sl No     | Field         | Data Type        | Constraints               |
+-----------+---------------+------------------+---------------------------+
| 1         | id            | BigAutoField     | Primary Key, Auto Inc     |
| 2         | user          | ForeignKey       | User model, CASCADE       |
| 3         | title         | CharField(200)   | Not Null                  |
| 4         | message       | TextField        | Not Null                  |
| 5         | type          | CharField(50)    | info/success/warning/error|
| 6         | is_read       | BooleanField     | Default False             |
| 7         | created_at    | DateTimeField    | Auto Now Add              |
+-----------+---------------+------------------+---------------------------+

===============================================================================
                            PROJECT STRUCTURE
===============================================================================

PeerLearn/
├── manage.py                    # Django management script
├── peerlearn/                   # Main project configuration
│   ├── __init__.py
│   ├── settings.py             # Django settings
│   ├── urls.py                 # Main URL routing
│   ├── wsgi.py                 # WSGI configuration
│   └── asgi.py                 # ASGI for WebSocket support
├── users/                       # User management app
│   ├── models.py               # User model definitions
│   ├── views.py                # User-related views
│   ├── forms.py                # User forms
│   ├── urls.py                 # User URL patterns
│   └── admin.py                # User admin interface
├── sessions/                    # Session management app
│   ├── models.py               # Session, Booking models
│   ├── views.py                # Session views
│   ├── api_views.py            # Session API endpoints
│   ├── consumers.py            # WebSocket consumers
│   ├── routing.py              # WebSocket URL routing
│   └── session_management.py   # Session logic
├── recommendations/             # ML recommendation engine
│   ├── models.py               # Recommendation models
│   ├── recommendation_engine.py # ML algorithms
│   └── views.py                # Recommendation views
├── templates/                   # HTML templates
│   ├── base.html               # Base template
│   ├── registration/           # Auth templates
│   ├── dashboard/              # Dashboard templates
│   ├── sessions/               # Session templates
│   └── portfolio/              # Portfolio templates
├── static/                      # Static files
│   ├── css/                    # Custom CSS
│   ├── js/                     # JavaScript files
│   └── images/                 # Image assets
└── media/                       # User uploaded files

===============================================================================
                        RECOMMENDATION SYSTEM FLOW
===============================================================================

=== Machine Learning Recommendation Engine ===

1. Content-Based Filtering:
   - Analyzes user skills and interests
   - Matches with session requirements
   - Calculates similarity scores using ML algorithms
   - Returns personalized session recommendations

2. Collaborative Filtering:
   - Finds users with similar learning patterns
   - Recommends sessions liked by similar users
   - Uses user behavior and rating data

3. Popularity-Based Filtering:
   - Tracks session view counts, bookings, completions
   - Calculates trending scores
   - Recommends currently popular sessions

4. Hybrid Approach:
   - Combines all three methods
   - Weighted scoring system
   - Real-time learning and adaptation

=== Recommendation Workflow ===

1. User Profile Analysis:
   - Extract user skills, interests, learning history
   - Parse and normalize skill data
   - Create user feature vectors

2. Session Matching:
   - Compare user profile with session requirements
   - Calculate compatibility scores
   - Apply popularity and rating boosts

3. Real-time Updates:
   - Track user interactions (views, bookings, completions)
   - Update popularity metrics
   - Refresh recommendations dynamically

===============================================================================
                            MODULE BREAKDOWN
===============================================================================

=== USER MODULES (7 modules) ===

1. Authentication Module
   - Login/Logout functionality
   - Registration with role selection
   - Password reset and email verification
   - Smart role detection and redirection

2. Profile Management Module
   - Profile creation and editing
   - Skill and interest management
   - Profile image upload
   - Bio and contact information

3. Dashboard Module
   - Role-specific dashboards (Learner/Mentor/Admin)
   - Real-time statistics and analytics
   - Quick actions and navigation
   - Personalized content display

4. Session Management Module
   - Session creation (mentors)
   - Session browsing and booking (learners)
   - Session scheduling and calendar
   - Session status tracking

5. Communication Module
   - Real-time video/audio sessions
   - WebRTC peer-to-peer connection
   - Chat functionality during sessions
   - Screen sharing capabilities

6. Recommendation Module
   - Personalized session recommendations
   - Mentor recommendations
   - Trending content discovery
   - ML-based matching algorithms

7. Admin Control Module
   - User management and moderation
   - Platform analytics and reporting
   - System configuration and settings
   - Owner privileges and controls

===============================================================================
                        PAGE STRUCTURE & NAVIGATION
===============================================================================

=== MAIN PAGES (15 pages) ===

1. Landing Page (/)
   - Platform introduction and features
   - Recent sessions showcase
   - Call-to-action buttons

2. Authentication Pages (/auth/)
   - Login page with smart role detection
   - Registration with role selection
   - Password reset functionality

3. Dashboard Pages (/dashboard/)
   - Learner Dashboard (5 sub-tabs)
   - Mentor Dashboard (6 sub-tabs)
   - Admin Dashboard (5 sub-tabs)

4. Session Pages (/sessions/)
   - Session browsing and filtering
   - Session details and booking
   - Video session room
   - Session feedback and rating

5. Profile Pages (/profile/)
   - User profile view and editing
   - Mentor portfolio pages
   - Follower/Following management

6. Recommendation Pages (/recommendations/)
   - Personalized recommendations
   - Trending sessions
   - Mentor discovery

=== SUB-PAGES BY DASHBOARD ===

Learner Dashboard Sub-tabs:
1. Overview - Statistics and recent activity
2. Browse Sessions - Available sessions with filters
3. My Bookings - Booked and completed sessions
4. Recommendations - Personalized suggestions
5. Following - Followed mentors and their activities

Mentor Dashboard Sub-tabs:
1. Overview - Earnings and session statistics
2. My Sessions - Created and scheduled sessions
3. Create Session - Session creation form
4. Requests - Learner requests for sessions
5. Analytics - Performance and rating analytics
6. Earnings - Payment and payout management

Admin Dashboard Sub-tabs:
1. Overview - Platform statistics and metrics
2. User Management - User control and moderation
3. Session Management - Session oversight
4. Analytics - Platform performance analytics
5. Admin Control - Owner privileges (if applicable)

===============================================================================
                            DATA FLOW DIAGRAM
===============================================================================

=== LEVEL 0 DFD (Context Diagram) ===

[Learners] ←→ [PeerLearn Platform] ←→ [Mentors]
     ↑              ↑                    ↑
     ↓              ↓                    ↓
[Admin Users] ←→ [External APIs] ←→ [Payment Gateway]

=== LEVEL 1 DFD (System Overview) ===

1. User Management Process
   - Input: Registration data, login credentials
   - Processing: Authentication, profile management
   - Output: User dashboard, session access

2. Session Management Process
   - Input: Session creation data, booking requests
   - Processing: Scheduling, room allocation, status tracking
   - Output: Session confirmations, meeting room access

3. Communication Process
   - Input: WebRTC signals, chat messages
   - Processing: Peer connection establishment, media routing
   - Output: Real-time video/audio streams

4. Recommendation Process
   - Input: User behavior, session data, ratings
   - Processing: ML algorithms, similarity calculations
   - Output: Personalized recommendations

5. Payment Process
   - Input: Booking requests, payment information
   - Processing: Payment validation, transaction recording
   - Output: Payment confirmations, receipts

===============================================================================
                        DEPLOYMENT & SCALABILITY
===============================================================================

=== Production Deployment ===

1. Application Server: Gunicorn + Nginx
2. Database: PostgreSQL with connection pooling
3. Cache: Redis for sessions and recommendations
4. File Storage: AWS S3 for media files
5. CDN: CloudFront for static asset delivery
6. Monitoring: Application performance monitoring
7. SSL: Let's Encrypt certificates for HTTPS

=== Scalability Considerations ===

1. Horizontal Scaling: Load balancer with multiple app servers
2. Database Optimization: Read replicas, query optimization
3. Caching Strategy: Multi-level caching (Redis, CDN)
4. WebSocket Scaling: Redis channel layers for multi-instance
5. Media Processing: Separate service for video processing
6. Microservices: Future migration to microservice architecture

This comprehensive documentation covers all aspects of the PeerLearn platform
architecture, from database design to deployment strategies.