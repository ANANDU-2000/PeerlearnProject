════════════════════════════════════════════════════════════════════════════════
                    PEERLEARN - UML CLASS DIAGRAMS
                      University Standard Documentation
════════════════════════════════════════════════════════════════════════════════

CLASS DIAGRAM 1: USER MANAGEMENT SUBSYSTEM
═══════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                              <<abstract>>                                   │
│                             AbstractUser                                    │
├─────────────────────────────────────────────────────────────────────────────┤
│ - username: str                                                             │
│ - email: str                                                                │
│ - password: str                                                             │
│ - first_name: str                                                           │
│ - last_name: str                                                            │
│ - is_active: bool                                                           │
│ - is_staff: bool                                                            │
│ - is_superuser: bool                                                        │
│ - date_joined: datetime                                                     │
│ - last_login: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + set_password(password: str): void                                         │
│ + check_password(password: str): bool                                       │
│ + get_full_name(): str                                                      │
│ + get_short_name(): str                                                     │
│ + email_user(subject: str, message: str): void                             │
└─────────────────────────────────────────────────────────────────────────────┘
                                    △
                                    │ (inheritance)
                                    │
┌─────────────────────────────────────────────────────────────────────────────┐
│                                 User                                        │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - role: ENUM ['mentor', 'learner']                                          │
│ - bio: str                                                                  │
│ - skills: str                                                               │
│ - interests: str                                                            │
│ - domain: str                                                               │
│ - expertise: str                                                            │
│ - career_goals: str                                                         │
│ - profile_image: ImageField                                                 │
│ - password_reset_token: str                                                 │
│ - password_reset_expires: datetime                                          │
│ - created_at: datetime                                                      │
│ - updated_at: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + is_mentor(): bool                                                         │
│ + is_learner(): bool                                                        │
│ + get_skill_list(): List[str]                                               │
│ + get_interest_list(): List[str]                                            │
│ + can_create_session(): bool                                                │
│ + can_book_session(): bool                                                  │
│ + get_active_bookings(): QuerySet[Booking]                                  │
│ + get_session_history(): QuerySet[Session]                                  │
│ + send_notification(message: str, type: str): void                          │
│ + generate_reset_token(): str                                               │
│ + verify_reset_token(token: str): bool                                      │
└─────────────────────────────────────────────────────────────────────────────┘
                          │ 1                           │ 1
                          │                             │
                          ▼ *                           ▼ *
┌─────────────────────────────────────────┐   ┌─────────────────────────────────┐
│            Notification                 │   │            Request              │
├─────────────────────────────────────────┤   ├─────────────────────────────────┤
│ - id: UUID                              │   │ - id: UUID                      │
│ - user: ForeignKey[User]                │   │ - learner: ForeignKey[User]     │
│ - message: str                          │   │ - mentor: ForeignKey[User]      │
│ - notification_type: str                │   │ - subject: str                  │
│ - is_read: bool                         │   │ - message: str                  │
│ - data: JSONField                       │   │ - request_type: str             │
│ - created_at: datetime                  │   │ - status: ENUM                  │
├─────────────────────────────────────────┤   │ - created_at: datetime          │
│ + mark_as_read(): void                  │   │ - response_message: str         │
│ + get_notification_data(): dict         │   ├─────────────────────────────────┤
│ + send_to_user(): void                  │   │ + accept(): void                │
│ + format_message(): str                 │   │ + decline(reason: str): void    │
└─────────────────────────────────────────┘   │ + is_pending(): bool            │
                                               │ + can_respond(): bool           │
                                               └─────────────────────────────────┘

CLASS DIAGRAM 2: SESSION MANAGEMENT SUBSYSTEM
═════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                                Session                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - mentor: ForeignKey[User]                                                  │
│ - title: str                                                                │
│ - description: str                                                          │
│ - duration: int                                                             │
│ - price: Decimal                                                            │
│ - max_participants: int                                                     │
│ - scheduled_time: datetime                                                  │
│ - status: ENUM ['scheduled', 'active', 'completed', 'cancelled']            │
│ - meeting_url: str                                                          │
│ - created_at: datetime                                                      │
│ - updated_at: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + is_available_for_booking(): bool                                          │
│ + get_available_slots(): int                                                │
│ + can_start(): bool                                                         │
│ + start_session(): void                                                     │
│ + end_session(): void                                                       │
│ + cancel_session(reason: str): void                                         │
│ + generate_meeting_url(): str                                               │
│ + send_reminders(): void                                                    │
│ + get_participants(): List[User]                                            │
│ + calculate_revenue(): Decimal                                              │
│ + is_mentor_session(user: User): bool                                       │
│ + get_session_feedback(): QuerySet[Feedback]                               │
│ + update_popularity_metrics(): void                                         │
└─────────────────────────────────────────────────────────────────────────────┘
                          │ 1
                          │
                          ▼ *
┌─────────────────────────────────────────────────────────────────────────────┐
│                               Booking                                       │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - session: ForeignKey[Session]                                              │
│ - learner: ForeignKey[User]                                                 │
│ - booking_date: datetime                                                    │
│ - booking_status: ENUM ['pending', 'confirmed', 'cancelled', 'completed']   │
│ - payment_status: ENUM ['pending', 'paid', 'failed', 'refunded']           │
│ - amount: Decimal                                                           │
│ - payment_id: str                                                           │
│ - razorpay_order_id: str                                                    │
│ - razorpay_payment_id: str                                                  │
│ - razorpay_signature: str                                                   │
│ - is_ready: bool                                                            │
│ - created_at: datetime                                                      │
│ - updated_at: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + confirm_booking(): void                                                   │
│ + cancel_booking(reason: str): void                                         │
│ + process_payment(payment_data: dict): bool                                 │
│ + verify_payment(): bool                                                    │
│ + mark_as_ready(): void                                                     │
│ + can_join_session(): bool                                                  │
│ + generate_receipt(): dict                                                  │
│ + request_refund(): void                                                    │
│ + send_booking_confirmation(): void                                         │
│ + get_session_access_url(): str                                             │
└─────────────────────────────────────────────────────────────────────────────┘
                          │ 1
                          │
                          ▼ 0..1
┌─────────────────────────────────────────────────────────────────────────────┐
│                              Feedback                                       │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - session: ForeignKey[Session]                                              │
│ - learner: ForeignKey[User]                                                 │
│ - mentor_rating: int                                                        │
│ - session_rating: int                                                       │
│ - content_quality: int                                                      │
│ - communication: int                                                        │
│ - helpfulness: int                                                          │
│ - platform_rating: int                                                     │
│ - overall_experience: int                                                   │
│ - comments: str                                                             │
│ - would_recommend: bool                                                     │
│ - improvement_suggestions: str                                              │
│ - is_public: bool                                                           │
│ - created_at: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + calculate_average_rating(): float                                         │
│ + is_positive_feedback(): bool                                              │
│ + get_rating_breakdown(): dict                                              │
│ + publish_feedback(): void                                                  │
│ + moderate_content(): void                                                  │
│ + send_to_mentor(): void                                                    │
└─────────────────────────────────────────────────────────────────────────────┘

CLASS DIAGRAM 3: RECOMMENDATION ENGINE SUBSYSTEM
════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                         RecommendationEngine                                │
├─────────────────────────────────────────────────────────────────────────────┤
│ - user: User                                                                │
│ - similarity_threshold: float                                               │
│ - max_recommendations: int                                                  │
├─────────────────────────────────────────────────────────────────────────────┤
│ + __init__(user: User): void                                                │
│ + get_personalized_recommendations(): List[Session]                        │
│ + content_based_filtering(): List[Session]                                 │
│ + collaborative_filtering(): List[Session]                                 │
│ + popularity_based_filtering(): List[Session]                              │
│ + get_trending_sessions(): List[Session]                                   │
│ + calculate_skill_similarity(skills1: List, skills2: List): float          │
│ + get_mentor_recommendations(): List[User]                                  │
│ + parse_skills(skills_data: str): List[str]                                │
│ + update_user_preferences(session: Session): void                          │
└─────────────────────────────────────────────────────────────────────────────┘
                          │ 1
                          │
                          ▼ *
┌─────────────────────────────────────────────────────────────────────────────┐
│                         PopularityMetric                                    │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - session: OneToOneField[Session]                                           │
│ - view_count: int                                                           │
│ - booking_count: int                                                        │
│ - completion_rate: float                                                    │
│ - rating_average: float                                                     │
│ - created_at: datetime                                                      │
│ - updated_at: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + calculate_score(): float                                                  │
│ + increment_view_count(): void                                              │
│ + increment_booking_count(): void                                           │
│ + update_completion_rate(): void                                            │
│ + update_rating_average(): void                                             │
│ + is_trending(): bool                                                       │
│ + get_popularity_rank(): int                                                │
└─────────────────────────────────────────────────────────────────────────────┘

CLASS DIAGRAM 4: COMMUNICATION & WEBRTC SUBSYSTEM
═════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                            WebRTCManager                                    │
├─────────────────────────────────────────────────────────────────────────────┤
│ - session_id: UUID                                                          │
│ - participants: Dict[str, User]                                             │
│ - ice_servers: List[dict]                                                   │
│ - connection_states: Dict[str, str]                                         │
├─────────────────────────────────────────────────────────────────────────────┤
│ + create_room(session: Session): str                                        │
│ + join_room(user: User, room_id: str): dict                                │
│ + leave_room(user: User, room_id: str): void                               │
│ + handle_webrtc_signal(signal_data: dict): void                            │
│ + get_ice_servers(): List[dict]                                             │
│ + monitor_connection_quality(): dict                                        │
│ + handle_reconnection(user: User): void                                     │
│ + record_session_metrics(): void                                            │
└─────────────────────────────────────────────────────────────────────────────┘
                          │ 1
                          │
                          ▼ *
┌─────────────────────────────────────────────────────────────────────────────┐
│                            ChatMessage                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - session: ForeignKey[Session]                                              │
│ - sender: ForeignKey[User]                                                  │
│ - message: str                                                              │
│ - message_type: ENUM ['text', 'file', 'system']                            │
│ - timestamp: datetime                                                       │
│ - is_deleted: bool                                                          │
├─────────────────────────────────────────────────────────────────────────────┤
│ + send_message(): void                                                      │
│ + delete_message(): void                                                    │
│ + moderate_content(): bool                                                  │
│ + format_timestamp(): str                                                   │
│ + is_system_message(): bool                                                 │
└─────────────────────────────────────────────────────────────────────────────┘

CLASS DIAGRAM 5: PAYMENT INTEGRATION SUBSYSTEM
══════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                          PaymentProcessor                                   │
├─────────────────────────────────────────────────────────────────────────────┤
│ - razorpay_client: razorpay.Client                                          │
│ - api_key: str                                                              │
│ - api_secret: str                                                           │
│ - currency: str = 'INR'                                                     │
├─────────────────────────────────────────────────────────────────────────────┤
│ + __init__(api_key: str, api_secret: str): void                            │
│ + create_order(amount: Decimal, booking: Booking): dict                     │
│ + verify_payment(payment_data: dict): bool                                  │
│ + capture_payment(payment_id: str, amount: Decimal): dict                   │
│ + refund_payment(payment_id: str, amount: Decimal): dict                    │
│ + get_payment_status(payment_id: str): str                                  │
│ + handle_webhook(payload: dict, signature: str): bool                       │
│ + calculate_platform_fee(amount: Decimal): Decimal                          │
│ + generate_receipt(booking: Booking): dict                                  │
└─────────────────────────────────────────────────────────────────────────────┘
                          │ uses
                          ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                           Transaction                                       │
├─────────────────────────────────────────────────────────────────────────────┤
│ - id: UUID                                                                  │
│ - booking: ForeignKey[Booking]                                              │
│ - transaction_id: str                                                       │
│ - razorpay_order_id: str                                                    │
│ - razorpay_payment_id: str                                                  │
│ - amount: Decimal                                                           │
│ - currency: str                                                             │
│ - status: ENUM ['created', 'attempted', 'paid', 'failed', 'refunded']      │
│ - gateway_response: JSONField                                               │
│ - created_at: datetime                                                      │
│ - updated_at: datetime                                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│ + process_payment(): bool                                                   │
│ + verify_signature(signature: str): bool                                    │
│ + mark_as_paid(): void                                                      │
│ + mark_as_failed(reason: str): void                                         │
│ + initiate_refund(): bool                                                   │
│ + get_transaction_receipt(): dict                                           │
└─────────────────────────────────────────────────────────────────────────────┘

INTERFACE SPECIFICATIONS
═══════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                          <<interface>>                                      │
│                        NotificationSender                                   │
├─────────────────────────────────────────────────────────────────────────────┤
│ + send_email(recipient: str, subject: str, message: str): bool             │
│ + send_sms(phone: str, message: str): bool                                 │
│ + send_push_notification(user: User, data: dict): bool                     │
└─────────────────────────────────────────────────────────────────────────────┘
                          △ (implements)
                          │
┌─────────────────────────────────────────────────────────────────────────────┐
│                       EmailNotificationService                              │
├─────────────────────────────────────────────────────────────────────────────┤
│ - smtp_server: str                                                          │
│ - smtp_port: int                                                            │
│ - username: str                                                             │
│ - password: str                                                             │
├─────────────────────────────────────────────────────────────────────────────┤
│ + send_email(recipient: str, subject: str, message: str): bool             │
│ + send_booking_confirmation(booking: Booking): bool                         │
│ + send_session_reminder(session: Session): bool                            │
│ + send_password_reset(user: User, token: str): bool                        │
└─────────────────────────────────────────────────────────────────────────────┘

DESIGN PATTERNS IMPLEMENTED
══════════════════════════

1. FACTORY PATTERN:
   - NotificationFactory: Creates appropriate notification types
   - PaymentProcessorFactory: Creates payment gateway instances

2. OBSERVER PATTERN:
   - SessionStatusObserver: Monitors session state changes
   - BookingStatusObserver: Tracks booking updates

3. STRATEGY PATTERN:
   - RecommendationStrategy: Different recommendation algorithms
   - PaymentStrategy: Multiple payment gateway support

4. SINGLETON PATTERN:
   - WebRTCConnectionManager: Single instance for connection management
   - CacheManager: Centralized caching system

5. DECORATOR PATTERN:
   - @login_required: Authentication decoration
   - @role_required: Role-based access control

RELATIONSHIP CARDINALITIES
═════════════════════════

User ──────1:N──────▶ Session (mentor creates sessions)
User ──────1:N──────▶ Booking (learner books sessions)
Session ───1:N──────▶ Booking (session has bookings)
Booking ───1:1──────▶ Feedback (optional feedback)
Session ───1:1──────▶ PopularityMetric (tracking metrics)
User ──────1:N──────▶ Notification (user notifications)
User ──────1:N──────▶ Request (mentor-learner requests)
Booking ───1:N──────▶ Transaction (payment transactions)